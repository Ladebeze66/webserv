Installation de NGINX

Sur Ubuntu/Debian :
Ouvrez un terminal et exécutez les commandes suivantes :
sudo apt update
sudo apt install nginx

Configuration de base de NGINX
NGINX est configuré via le fichier nginx.conf, généralement situé dans /etc/nginx/nginx.conf sous Linux. Vous pouvez éditer ce fichier pour configurer NGINX. Voici une configuration de base pour servir un site statique :
server {
    listen 80;
    server_name example.com www.example.com;

    location / {
        root /var/www/html;
        index index.html index.htm;
    }
}
Remplacez /var/www/html par le chemin d'accès au répertoire contenant vos fichiers HTML.

Vérification de la configuration et redémarrage de NGINX
Après avoir modifié la configuration, vérifiez qu'il n'y a pas d'erreurs :
sudo nginx -t
Si tout est correct, redémarrez NGINX pour appliquer les changements :
sudo systemctl restart nginx

Utilisation de NGINX comme proxy inverse
Pour configurer NGINX comme un proxy inverse (par exemple, pour un serveur d'applications en amont), vous pouvez ajouter une configuration comme celle-ci dans votre bloc server :
location /app {
    proxy_pass http://localhost:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}
Ceci redirige les requêtes de example.com/app vers un serveur tournant sur le port 8080 sur la même machine.

Sécurisation de NGINX avec HTTPS
Pour configurer NGINX avec HTTPS, vous aurez besoin d'un certificat SSL/TLS. Vous pouvez obtenir un certificat gratuitement avec Let's Encrypt. Après avoir obtenu vos certificats, configurez NGINX pour utiliser HTTPS :
server {
    listen 443 ssl;
    server_name example.com www.example.com;

    ssl_certificate /chemin/vers/certificat.pem;
    ssl_certificate_key /chemin/vers/cle_privee.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        root /var/www/html;
        index index.html index.htm;
    }
}

Conclusion
NGINX est extrêmement puissant et flexible. Vous pouvez l'utiliser pour des sites web statiques, comme proxy pour des applications plus complexes, ou même comme répartiteur de charge. La documentation officielle de NGINX est une ressource précieuse pour approfondir vos connaissances : Documentation NGINX.

1. Serveur web pour contenu statique
Utilité : NGINX est extrêmement efficace pour servir des fichiers statiques comme des images, des scripts JavaScript, des feuilles de style CSS, et des pages HTML. Il gère très bien les connexions simultanées élevées, ce qui le rend idéal pour des sites web à fort trafic.

Exemple :
Supposons que vous ayez un site de portfolio qui contient des images, des fichiers HTML et CSS. Vous pouvez configurer NGINX pour servir ce contenu rapidement et efficacement avec une configuration simple qui spécifie le répertoire racine du site et les fichiers index par défaut, comme montré dans le tutoriel précédent.

2. Proxy inverse
Utilité : NGINX peut agir comme intermédiaire entre les utilisateurs et les serveurs d'application en backend (comme Node.js, Python Django, ou Java Spring Boot). Cela permet de gérer la charge, de sécuriser les échanges, et de fournir du contenu caché.

Exemple :
Imaginez que vous développiez une application Node.js exécutant sur le port 3000. NGINX peut être configuré pour accepter les requêtes sur le port standard 80 et les rediriger vers votre application Node.js, en offrant une couche de sécurité et la capacité à gérer plusieurs applications sur le même serveur physique.

3. Répartiteur de charge (Load Balancer)
Utilité : NGINX peut distribuer les requêtes entrantes vers plusieurs serveurs en backend, améliorant la répartition de la charge et la redondance, ce qui augmente la disponibilité et la résilience de l'application.

Exemple :
Vous avez trois instances de votre application web tournant sur trois serveurs distincts. NGINX peut être configuré pour distribuer les requêtes entrantes entre ces trois serveurs, potentiellement basé sur différents algorithmes comme round-robin, least-connected, ou ip-hash.

4. Mise en cache
Utilité : NGINX peut stocker en cache les contenus dynamiques et statiques, réduisant le temps de réponse et diminuant la charge sur les serveurs en backend.

Exemple :
Un site d'actualités avec de nombreux articles peut utiliser NGINX pour mettre en cache les pages des articles les plus lus. Cela permet aux visiteurs de charger ces pages rapidement, même lors de pics de trafic, car les requêtes ne nécessitent pas de traitement par le serveur d'applications à chaque fois.

5. Gestion des certificats SSL/TLS
Utilité : NGINX permet de gérer facilement les certificats SSL/TLS pour sécuriser les communications entre le client et le serveur via HTTPS.

Exemple :
Pour un site e-commerce, il est crucial de sécuriser les transactions des clients. NGINX peut être configuré pour utiliser des certificats SSL/TLS, garantissant que toutes les données envoyées, comme les informations de carte de crédit, sont cryptées et sécurisées.

6. Compression des données
Utilité : NGINX peut compresser les réponses HTTP en utilisant Gzip, réduisant ainsi la quantité de données transmises sur le réseau et améliorant la vitesse de chargement des pages pour les utilisateurs finaux.

Exemple :
Pour un blog avec de longs articles et des images, NGINX peut compresser le contenu HTML et CSS pour accélérer le temps de téléchargement des pages, améliorant ainsi l'expérience utilisateur et réduisant la bande passante utilisée.

Ces exemples montrent comment NGINX peut être utilisé dans différents aspects d'un projet web, allant de la simple livraison de contenu à des configurations plus complexes pour la haute disponibilité et la sécurité.