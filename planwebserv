Plan de Projet

1.Compréhension et Planification

Étude de la RFC HTTP : Lire et comprendre les RFC pertinentes pour HTTP/1.1.

Analyse de NGINX : Étudier le comportement de NGINX pour modéliser des comportements similaires.

2.Configuration de l'Environnement de Développement

Outils et Compilation : Configurer l'environnement C++ avec le Makefile approprié pour compiler avec -Wall -Wextra -Werror -std=c++98.

3.Conception de l'Architecture de Base

Modélisation des Composants : Définir les grandes classes et modules (Serveur, Réponse, Requête, Routeur, Gestionnaire de CGI, etc.).

Gestion des Connexions : Utiliser socket, bind, listen, accept pour gérer les connexions.

4.Implémentation du Traitement des Requêtes HTTP

Parsing des Requêtes : Extraire les informations telles que la méthode, l'URI et les en-têtes.

Gestion des Réponses : Construire des réponses appropriées en fonction des requêtes.

5.Gestion des Données Dynamiques avec CGI

Configuration des CGI : Support pour l'exécution de scripts externes (PHP, Python) en fonction de l'extension du fichier.

6.Support des Sessions et Cookies

Implémentation des Cookies : Envoyer et recevoir des cookies pour la gestion de session.

7.Sécurité et Gestion des Erreurs

Gestion des Erreurs : Assurer que le serveur gère correctement toutes les erreurs sans crash.

Tests de Charge : Utiliser des outils pour tester la robustesse et la capacité du serveur à gérer les connexions simultanées.

8.Tests et Validation

Tests Unitaires et d'Intégration : Écrire des tests pour chaque composant et tests d'intégration globaux.

Tests avec Telnet et Navigateur : Vérifier le comportement du serveur avec Telnet et un navigateur web.

9.Documentation et Rendu Final

Documentation du Code : Commenter et documenter le code et l'architecture.

Préparation du Makefile et du Rendu : S'assurer que le Makefile suit les consignes et que tous les fichiers sont prêts pour la soumission.